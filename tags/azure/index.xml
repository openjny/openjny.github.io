<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Azure on /etc/openjny</title><link>https://openjny.github.io/tags/azure/</link><description>Recent content in Azure on /etc/openjny</description><generator>Hugo</generator><language>ja</language><lastBuildDate>Sun, 15 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://openjny.github.io/tags/azure/index.xml" rel="self" type="application/rss+xml"/><item><title>Microsoft Learn Docs の公式 MCP サーバーを試す</title><link>https://openjny.github.io/posts/2025/06/15/exploring-ms-learn-docs-mcp-server/</link><pubDate>Sun, 15 Jun 2025 00:00:00 +0000</pubDate><guid>https://openjny.github.io/posts/2025/06/15/exploring-ms-learn-docs-mcp-server/</guid><description>&lt;p>先日、Microsoft の公式ドキュメントを検索するためのオフィシャル MCP サーバー (Microsoft Learn Docs MCP Server) が公開されました。自分のような Azure ユーザーには大変嬉しい発表です。&lt;/p>
&lt;p>&lt;a href="https://github.com/MicrosoftDocs/mcp" class="external-link" target="_blank" rel="noopener">https://github.com/MicrosoftDocs/mcp&lt;/a>&lt;/p>
&lt;p>ただ、具体的な実装とアーキテクチャは公開されておらず、どんな動作をするのか未知な部分があります。そこで、本記事では Microsoft Learn Docs MCP Server を使ってみてわかったことを少しまとめてみました。&lt;/p>
&lt;p>なお、読者には MCP の基礎知識があることを前提にしています。MCP について知りたい場合は、次のような文献をあたってみてください。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://modelcontextprotocol.io/introduction" class="external-link" target="_blank" rel="noopener">Introduction - Model Context Protocol&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/microsoft/mcp-for-beginners/blob/main/translations/ja/README.md" class="external-link" target="_blank" rel="noopener">mcp-for-beginners/translations/ja/README.md at main · microsoft/mcp-for-beginners&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>また、Microsoft が提供している MCP サーバーは、Microsoft Learn Docs MCP Server だけではありません。Azure MCP Server など、他のオフィシャル実装も気になる場合は、以下をチェックしてみてください。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/microsoft/mcp" class="external-link" target="_blank" rel="noopener">https://github.com/microsoft/mcp&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>サービス プリンシパルが作成できなかった時に確認したこと</title><link>https://openjny.github.io/posts/2024/07/24/troubleshooting-error-when-creating-service-principal/</link><pubDate>Wed, 24 Jul 2024 00:00:00 +0000</pubDate><guid>https://openjny.github.io/posts/2024/07/24/troubleshooting-error-when-creating-service-principal/</guid><description/></item><item><title>ExpressRoute (Microsoft Peering) を使った経路最適化の勘所</title><link>https://openjny.github.io/posts/2024/06/15/optimizing-routing-with-expressroute-ms-peering/</link><pubDate>Sat, 15 Jun 2024 00:00:00 +0000</pubDate><guid>https://openjny.github.io/posts/2024/06/15/optimizing-routing-with-expressroute-ms-peering/</guid><description/></item><item><title>マルチテナント サービスのスプーフィング リスク</title><link>https://openjny.github.io/posts/2024/06/09/spoofing-risks-in-multitenant-service/</link><pubDate>Sun, 09 Jun 2024 00:00:00 +0000</pubDate><guid>https://openjny.github.io/posts/2024/06/09/spoofing-risks-in-multitenant-service/</guid><description/></item><item><title>Azure Confidential Computing を入門したい人に贈る基本のき</title><link>https://openjny.github.io/posts/2022/12/22/azure-confidential-computing-101/</link><pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate><guid>https://openjny.github.io/posts/2022/12/22/azure-confidential-computing-101/</guid><description/></item><item><title>Azure で IaC (ARM Template/Bicep) するなら PSRule for Azure！#2 [CI パイプライン編]</title><link>https://openjny.github.io/posts/2022/09/08/psrule-for-azure-02/</link><pubDate>Thu, 08 Sep 2022 00:00:00 +0000</pubDate><guid>https://openjny.github.io/posts/2022/09/08/psrule-for-azure-02/</guid><description/></item><item><title>Azure で IaC (ARM Template/Bicep) するなら PSRule for Azure！#1 [導入編]</title><link>https://openjny.github.io/posts/2022/09/07/psrule-for-azure-01/</link><pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate><guid>https://openjny.github.io/posts/2022/09/07/psrule-for-azure-01/</guid><description/></item><item><title>Bluebird: Azure SDN を支えるプログラマブル SDN ToR スイッチ</title><link>https://openjny.github.io/posts/2022/04/15/bluebird-azure-adn-tor-switch/</link><pubDate>Fri, 15 Apr 2022 00:00:00 +0000</pubDate><guid>https://openjny.github.io/posts/2022/04/15/bluebird-azure-adn-tor-switch/</guid><description/></item><item><title>Azure Gateway Load Balancer (Preview) を試す</title><link>https://openjny.github.io/posts/2021/11/11/azure-gateway-load-balancer-with-linux-vm/</link><pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate><guid>https://openjny.github.io/posts/2021/11/11/azure-gateway-load-balancer-with-linux-vm/</guid><description/></item><item><title>Azure Load Balancer の正常性関連メトリックを使いこなす</title><link>https://openjny.github.io/posts/2020/10/03/azure-lb-health-probes-101/</link><pubDate>Sat, 03 Oct 2020 00:00:00 +0000</pubDate><guid>https://openjny.github.io/posts/2020/10/03/azure-lb-health-probes-101/</guid><description/></item><item><title>和訳: Who’s to blame? Debugging Internet performance for Azure users with BlameIt</title><link>https://openjny.github.io/posts/2020/03/11/debugging-internet-performance-for-azure-users-with-blameit/</link><pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate><guid>https://openjny.github.io/posts/2020/03/11/debugging-internet-performance-for-azure-users-with-blameit/</guid><description>&lt;p>Azure にアクセスするユーザーが低レイテンシで快適にサービスを利用できるように、Microsoft では ISP (自律システム) の障害を検知するシステムを活用しています。そのシステム &amp;ldquo;BlameIt&amp;rdquo; を紹介する公式ブログがあったので、それを和訳してみました。&lt;/p></description></item><item><title>Azure Load Balancer の SNAT がさっぱりわからん</title><link>https://openjny.github.io/posts/2019/12/25/alb-snat/</link><pubDate>Wed, 25 Dec 2019 00:00:00 +0000</pubDate><guid>https://openjny.github.io/posts/2019/12/25/alb-snat/</guid><description>&lt;p>この記事では、Azure Load Balancer の配下にある VM から、インターネットと通信したい時の話を取りあげます。
具体的には、いわゆる SNAT と呼ばれる仕組みで、Outbound 通信ができるパターンが LB の構成に依存していくつか存在するので、それを紹介します。&lt;/p>
&lt;h2 id="背景">
 背景
 &lt;a class="heading-link" href="#%e8%83%8c%e6%99%af">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2></description></item><item><title>Ananta: Azure を支えるステートフル L4 ロードバランサー</title><link>https://openjny.github.io/posts/2019/12/23/ananta/</link><pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate><guid>https://openjny.github.io/posts/2019/12/23/ananta/</guid><description>&lt;p>この記事は &lt;a href="https://qiita.com/advent-calendar/2019/microsoft-azure-tech" class="external-link" target="_blank" rel="noopener">Microsoft Azure Tech Advent Calendar 2019&lt;/a> の 18 日目の記事です。
今日は、Azure の裏側の話、データーセンター (DC) を支える、Ananta と呼ばれる Software Load Balancer (SLB) アーキテクチャを紹介したいと思います。&lt;/p>
&lt;h2 id="はじめに">
 はじめに
 &lt;a class="heading-link" href="#%e3%81%af%e3%81%98%e3%82%81%e3%81%ab">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2></description></item></channel></rss>